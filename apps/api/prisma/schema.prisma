// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map(name: "roles")
}

model User {
  id                    String         @id @default(uuid())
  name                  String?
  email                 String?        @unique
  password              String?
  phone                 String?
  image                 String?        @db.VarChar(1000)
  gender                String?
  birthDate             DateTime?      @map(name: "birth_date")
  isVerified            Boolean        @default(true) @map(name: "is_verified")
  emailVerified         DateTime?      @map("email_verified")
  longitude             Float?
  latitude              Float?
  referralCode          String?        @map("referral_code")
  createdDate           DateTime       @default(now()) @map(name: "created_date")
  updatedDate           DateTime       @updatedAt @map(name: "updated_date")
  roleId                String         @map(name: "role_id")
  role                  Role           @relation(fields: [roleId], references: [id])
  createdProducts       Product[]      @relation("CreatedProducts")
  updatedProducts       Product[]      @relation("UpdatedProducts")
  userAddress           UserAddress[]
  createdStockHistories StockHistory[] @relation("CreatedStockHistories")
  carts                 Cart[]
  orders                Order[]
  accounts              Account[]
  sessions              Session[]
  userStores            UserStore[]
  userVouchers          UserVoucher[]

  @@map(name: "users")
}

model UserAddress {
  id              String  @id @default(uuid())
  label           String
  address         String
  subdistrictId   Int     @map(name: "subdistrict_id")
  subdistrictName String  @map(name: "subdistrict_name")
  cityId          Int     @map(name: "city_id")
  cityName        String  @map(name: "city_name")
  provinceId      Int     @map(name: "province_id")
  provinceName    String  @map(name: "province_name")
  postalCode      String? @map(name: "postal_code")
  isDefault       Boolean @default(false) @map(name: "is_default")
  user            User    @relation(fields: [userId], references: [id])
  userId          String  @map(name: "user_id")
  orders          Order[]

  @@map(name: "user_address")
}

model Store {
  id              String      @id @default(uuid())
  name            String
  address         String
  subdistrictId   Int         @map(name: "subdistrict_id")
  subdistrictName String      @map(name: "subdistrict_name")
  cityId          Int         @map(name: "city_id")
  cityName        String      @map(name: "city_name")
  provinceId      Int         @map(name: "province_id")
  provinceName    String      @map(name: "province_name")
  postalCode      String?     @map(name: "postal_code")
  longitude       Float?
  latitude        Float?
  isDefault       Boolean     @default(false) @map(name: "is_default")
  createdDate     DateTime    @default(now()) @map(name: "created_date")
  updatedDate     DateTime    @updatedAt @map(name: "updated_date")
  stocks          Stock[]
  discounts       Discount[]
  userStores      UserStore[]
  carts           Cart[]
  orders          Order[]

  @@map(name: "stores")
}

model UserStore {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String @map(name: "user_id")
  store   Store  @relation(fields: [storeId], references: [id])
  storeId String @map(name: "store_id")

  @@map(name: "user_stores")
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  slug     String    @unique
  image    String?   @db.VarChar(1000)
  products Product[]

  @@map(name: "categories")
}

model Product {
  id            String         @id @default(uuid())
  name          String         @unique
  slug          String         @unique
  description   String
  image         String?        @db.VarChar(1000)
  price         Float          @default(0)
  isActive      Boolean        @default(true) @map(name: "is_active")
  createdByUser User?          @relation("CreatedProducts", fields: [createdBy], references: [id])
  createdBy     String?        @map(name: "created_by")
  createdDate   DateTime       @default(now()) @map(name: "created_date")
  updatedByUser User?          @relation("UpdatedProducts", fields: [updatedBy], references: [id])
  updatedBy     String?        @map(name: "updated_by")
  updatedDate   DateTime       @updatedAt @map(name: "updated_date")
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String         @map(name: "category_id")
  productImages ProductImage[]
  stocks        Stock[]
  discounts     Discount[]
  cartItems     CartItem[]
  orderItems    OrderItem[]

  @@map(name: "products")
}

model ProductImage {
  id        String  @id @default(uuid())
  image     String  @db.VarChar(1000)
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map(name: "product_id")

  @@map(name: "product_images")
}

model Stock {
  id             String         @id @default(uuid())
  baseStock      Float          @default(0) @map(name: "base_stock")
  usedStock      Float          @default(0) @map(name: "used_stock")
  remainingStock Float          @default(0) @map(name: "remaining_stock")
  store          Store          @relation(fields: [storeId], references: [id])
  storeId        String         @map(name: "store_id")
  product        Product        @relation(fields: [productId], references: [id])
  productId      String         @map(name: "product_id")
  stockHistories StockHistory[]

  @@map(name: "stocks")
}

model StockHistory {
  id            String   @id @default(uuid())
  type          String
  stock         Float    @default(0)
  stockProduct  Stock    @relation(fields: [stockId], references: [id])
  stockId       String   @map(name: "stock_id")
  createdByUser User?    @relation("CreatedStockHistories", fields: [createdBy], references: [id])
  createdBy     String?  @map(name: "created_by")
  createdDate   DateTime @default(now()) @map(name: "created_date")

  @@map(name: "stock_histories")
}

model Discount {
  id              String        @id @default(uuid())
  type            String
  amount          Float?        @default(0)
  unit            String?
  minimumPrice    Float?        @default(0) @map(name: "minimum_price")
  maximumDiscount Float?        @default(0) @map(name: "maximum_discount")
  minimumOrders   Float?        @default(0) @map(name: "minimum_orders")
  store           Store         @relation(fields: [storeId], references: [id])
  storeId         String        @map(name: "store_id")
  product         Product?      @relation(fields: [productId], references: [id])
  productId       String?       @map(name: "product_id")
  userVouchers    UserVoucher[]

  @@map(name: "discounts")
}

model UserVoucher {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map(name: "user_id")
  discount    Discount  @relation(fields: [discountId], references: [id])
  discountId  String    @map(name: "discount_id")
  order       Order?    @relation(fields: [orderId], references: [id])
  orderId     String?   @map(name: "order_id")
  isUsed      Boolean   @default(false) @map(name: "is_used")
  createdDate DateTime  @default(now()) @map(name: "created_date")
  expiredDate DateTime? @map(name: "expired_date")

  @@map(name: "user_vouchers")
}

model Cart {
  id            String     @id @default(uuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String     @map(name: "user_id")
  store         Store?     @relation(fields: [storeId], references: [id])
  storeId       String?    @map(name: "store_id")
  itemsPrice    Float      @default(0) @map(name: "items_price")
  itemsDiscount Float      @default(0) @map(name: "itemsDiscount")
  totalPrice    Float      @default(0) @map(name: "total_price")
  createdDate   DateTime   @default(now()) @map(name: "created_date")
  updatedDate   DateTime   @updatedAt @map(name: "updated_date")
  cartItems     CartItem[]

  @@map(name: "carts")
}

model CartItem {
  id          String  @id @default(uuid())
  name        String
  slug        String
  description String
  image       String? @db.VarChar(1000)
  quantity    Float   @default(0)
  price       Float   @default(0)
  discount    Float   @default(0)
  isBuy1Get1  Boolean @default(false) @map(name: "is_buy1_get1")
  cart        Cart    @relation(fields: [cartId], references: [id])
  cartId      String  @map(name: "cart_id")
  product     Product @relation(fields: [productId], references: [id])
  productId   String  @map(name: "product_id")

  @@map(name: "cart_items")
}

model Order {
  id               String        @id @default(uuid())
  orderNumber      String        @map(name: "order_number")
  orderDate        DateTime      @default(now()) @map(name: "order_date")
  user             User          @relation(fields: [userId], references: [id])
  userId           String        @map(name: "user_id")
  userAddress      UserAddress   @relation(fields: [userAddressId], references: [id])
  userAddressId    String        @map(name: "user_address_id")
  store            Store         @relation(fields: [storeId], references: [id])
  storeId          String        @map(name: "store_id")
  itemsPrice       Float         @default(0) @map(name: "items_price")
  shippingPrice    Float         @default(0) @map(name: "shipping_price")
  itemsDiscount    Float         @default(0) @map(name: "itemsDiscount")
  shippingDiscount Float         @default(0) @map(name: "shippingDiscount")
  voucherDiscount  Float         @default(0) @map(name: "voucherDiscount")
  referralDiscount Float         @default(0) @map(name: "referralDiscount")
  totalPrice       Float         @default(0) @map(name: "total_price")
  orderStatus      String        @default("Menunggu Pembayaran") @map(name: "order_status")
  paymentMethod    String        @map(name: "payment_method")
  paymentImage     String?       @map(name: "payment_image")
  paymentDate      DateTime?     @map(name: "payment_date")
  shippingCourier  String        @map(name: "shipping_courier")
  shippingService  String        @map(name: "shipping_service")
  shippingDate     DateTime?     @map(name: "shipping_date")
  orderItems       OrderItem[]
  userVouchers     UserVoucher[]

  @@map(name: "orders")
}

model OrderItem {
  id            String  @id @default(uuid())
  name          String
  slug          String
  description   String
  image         String? @db.VarChar(1000)
  quantity      Float   @default(0)
  bonusQuantity Float   @default(0) @map(name: "bonus_quantity")
  price         Float   @default(0)
  discount      Float   @default(0)
  order         Order   @relation(fields: [orderId], references: [id])
  orderId       String  @map(name: "order_id")
  product       Product @relation(fields: [productId], references: [id])
  productId     String  @map(name: "product_id")

  @@map(name: "order_items")
}
